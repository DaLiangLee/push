###集群配置

#master  不做aof和rdb
port 10010
daemonize yes
pidfile 10010.pid
logfile 10010.log
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-migration-barrier 1
cluster-require-full-coverage yes
cluster-slave-validity-factor 10
min-slaves-to-write 2  #只有当2个或2个以上的从数据库连接到主库时，主数据库才是可写的，否则返回错误
min-slave2-max-lag 10  #从数据库失去连接的最长时间，该选项默认是关闭的，在分布式系统中，打开并合理配置该选项可以降低主从架构因为网络分区导致的数据不一致问题
dir /Users/liuss/workspance/demo/redis/cluster/10010/


#slave 根据应用的恰当的选择aof或者rdb  aof比rdb优先级高,如果同时存在aof和rdb配置,则只有aof生效
port 10040
daemonize yes
pidfile 10040.pid
logfile 10040.log
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-migration-barrier 1
cluster-require-full-coverage yes
cluster-slave-validity-factor 10
dir /Users/liuss/workspance/demo/redis/cluster/10040/

save 900 1    #当有一条Keys数据被改变时，9k00秒刷新到Dis一次
save 300 10   #当有10条Keys数据被改变时，300秒刷新到Disk一次
save 60 10000 #当有10000条Keys数据被改变时，60秒刷新到Disk一次

#开启aof
#appendonly yes
#appendfilename 10040.aof
#auto-aof-rewrite-percentage 100
#auto-aof-rewrite-min-size 5mb


#创建集群
redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005

#查看集群节点情况
redis-trib.rb check 127.0.0.1:7000
或者
> cluster nodes

#重新分片
redis-trib.rb reshard 127.0.0.1:7000

#模拟宕机,测试故障转移
> debug segfault

#手动故障转移(需要在从节点执行)
> cluster failover

#新增节点
redis-trib.rb add-node 127.0.0.1:7006 127.0.0.1:7000   #默认新增主节点
redis-trib.rb --slave [--master-id node-id] add-node 127.0.0.1:7006 127.0.0.1:7000  #新增从节点

#成为某个主节点的从节点 (需要在从节点执行)
> cluster replicate master-node-id

#删除节点(主从节点都可以)
redis-trib del-node 127.0.0.1:7000 node-id

#导入数据到集群中
redis-trib.rb import --from 10.0.10.1:6379 127.0.0.1:7000

#自动平衡集群节点slot数量
redis-trib.rb rebalance --threshold 10 --weight node-id=5 --weight node-id=5 --use-empty-masters  127.0.0.1:7000




###主从复制配置
配置主从复制的时候,只需要将从服务器配置中加 slaveof <master-host> <master-port>
**除了多个从服务器连接到一个主服务器之外，多个从服务器也可以连接到一个从服务器上，形成一个图状结构
**


